//==========================================================================================
//
//	Internal Clock
//
//	Overview: The "when" part of the neural network. Each clock will advance at an interval,
//		probably manually, and will keep track of what neurons were active at what cycle in
//		the clock's history. That data will then be used to make relative statements between
//		those neurons (e.g. X happened before Y).
//
//==========================================================================================
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//==========================================================================================
//
//	[START] Includes, Packages, Headers
//
//------------------------------------------------------------------------------------------

// Package
package RASA;

// Imports
import java.util.ArrayList;
import java.util.List;

//------------------------------------------------------------------------------------------
//
//	[END] Includes, Packages, Headers
//
//==========================================================================================
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//==========================================================================================
//
//	[START] Internal_Clock Class
//
//------------------------------------------------------------------------------------------

public class Internal_Clock {

	Time_Node Current_TN;
	Time_Node First_TN;
	Time_Node Last_TN;
	private int Next_Time;
	public String Alias;
	public int ID;
	public Neural_Network Parent_NN;
	
	// List
	public Internal_Clock Next;
	public Internal_Clock Prev;
	
	public Internal_Clock() {
		// TODO Auto-generated constructor stub
		Alias = "New Internal Clock";
		Current_TN = null;
		First_TN = null;
		Last_TN = null;
		Next_Time = 0;
		ID = 0;
		Parent_NN = null;
		Next = null;
		Prev = null;
	}

	// TODO Finish this guy
	// Uses relative time
	public Time_Node Get_TN(int Time) {
		// Check if list is empty
		if (Current_TN == null) {
			// Create new nodes
			Current_TN = new Time_Node(Generate_Next_Time(), this);
			First_TN = Current_TN;
			Last_TN = Current_TN;
		}
		
		// Find start point to search
		Time_Node TN = Current_TN;
		while (TN.Relative_Time() != Time) {
			if (TN.Relative_Time() < Time) {
				
				// Check if next exists
				if (TN.Next != null) {
					TN = TN.Next;
				} else { // Create next
					TN.Next = new Time_Node(Generate_Next_Time(), this);
					TN.Next.Prev = TN;
				}
			} else {
				// Search backward
				Displacement--;
			}
		}
		
		return TN;
	}
	public Time_Node Get_TN() {
		return Get_TN(0);
	}
	
	public void Advance_Clock() {
		Current_TN = Get_TN(1);
	}
	
	public int Current_Time(){
		return Get_TN().Actual_Time();
	}
	
	private int Generate_Next_Time(){
		return Next_Time++;
	}
	
	//==========================================
	// Reports
	//------------------------------------------
	
	public void Print_Report(String Tags) {

		// Header + full info
		if ((!Tags.contains("SHORT") || Tags.contains("FULL"))
				&& !Tags.contains("HIDE_CH")) {
			// Print border
			System.out.print("\n");
			Print_Header();
			System.out.print("========================================");
			Print_Header();
			System.out.print(" Printing Internal Clock: " + Alias);
			Print_Header();
			System.out.print("----------------------------------------");

			// Print list information
			Print_Header();
			Print_Header();
			System.out.print(" << List Info >> ");
			Print_Header();
			System.out.print(" Next: ");
			if (Next == null) {
				System.out.print("---");
			} else {
				Next.Print_Label();
				System.out.print(" \"" + Next.Alias + "\"");
			}
			Print_Header();
			System.out.print(" Prev: ");
			if (Prev == null) {
				System.out.print("---");
			} else {
				Prev.Print_Label();
				System.out.print(" \"" + Prev.Alias + "\"");
			}
		}
		
		// Print Time Nodes
		Print_Header();
		Print_Header();
		System.out.print(" << Time Nodes >> ");
		Time_Node TN = First_TN;
		while (TN != null) {
			TN.Print_Report(Tags);
			TN = TN.Next;
		}
		
	}

	public void Print_Label() {
		System.out.print("[IC:" + ID + "]");
	}

	public void Print_Header() {
		Parent_NN.Print_Header();
		Print_Label();
	}
	
}

//------------------------------------------------------------------------------------------
//
//	[END] Internal_Clock Class
//
//==========================================================================================