//==========================================================================================
//
//	Charge Node
//
//	Overview: Record of a charge for a certain channel at a certain time.
//
//	Note: Weights behave like confidence ratings.
//		Between 0.00 (0%) and 1.00 (100%)
//
//==========================================================================================
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//==========================================================================================
//
//	[START] Includes, Packages, Headers
//
//------------------------------------------------------------------------------------------

// Package
package RASA;

//------------------------------------------------------------------------------------------
//
//	[END] Includes, Packages, Headers
//
//==========================================================================================
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//==========================================================================================
//
//	[START] Charge_Node Class
//
//------------------------------------------------------------------------------------------

public class Charge_Node {

	//=====================================================================
	//
	// 		CLASS FIELDS
	//
	//---------------------------------------------------------------------
	
	// Parent info
	public Time_Node TN;
	public Channel CH;
	public Neuron N;
	public Neural_Network NN;
	
	// Unordered lists
	public Charge_Node TN_Next;
	public Charge_Node TN_Prev;
	public Charge_Node CH_Next;
	public Charge_Node CH_Prev;
	
	// Ordered Lists
	public Charge_Node NN_Next;
	public Charge_Node NN_Prev;
	public Charge_Node N_CH_Next; // Neuron -> Channel
	public Charge_Node N_CH_Prev; // Neuron -> Channel
	public Charge_Node N_TN_Next; // Neuron -> Channel -> Time Node
	public Charge_Node N_TN_Prev; // Neuron -> Channel -> Time Node
	
	// Attributes
	public double Stimulation;
	public double Current_Charge;
	public double Current_Weight;
	public double Potential_Charge;
	public double Potential_Weight;
	
	// For use in updates
	public double Charge;
	public double Weight;
	
	//=====================================================================
	//
	// 		CLASS METHODS
	//
	//---------------------------------------------------------------------
	
	public Charge_Node() {
		
		// Initialize fields
		TN = null;
		CH = null;
		N = null;
		NN = null;
		
		// Unordered lists
		TN_Next = null;
		TN_Prev = null;
		CH_Next = null;
		CH_Prev = null;
		
		// Ordered lists
		NN_Next = null;
		NN_Prev = null;
		N_CH_Next = null;
		N_CH_Prev = null;
		N_TN_Next = null;
		N_TN_Next = null;
		
		Stimulation = 0.0;
		Current_Charge = 0.0;
		Current_Weight = 0.0;
		Potential_Charge = 0.0;
		Potential_Weight = 0.0;
		
		Charge = 0.0;
		Weight = 0.0;
	}

	public double Update_Rating() {
		return 1.00;
	}
	
	// Main method
	public void Update() {
		
		// Reset variables
		Potential_Charge = 0.0;
		Potential_Weight = 0.0;
		Reset_Working();
		
		// Long Term
		Reset_Working();
		// Neuron.LT_Analysis(this);
		Potential_Weight += Weight * CH.LT_Weight;
		Potential_Charge += Charge * Weight * CH.LT_Weight;
		
		// Short Term
		Reset_Working();
		// Neuron.ST_Analysis(this);
		Potential_Weight += Weight * CH.ST_Weight;
		Potential_Charge += Charge * Weight * CH.ST_Weight;
		
		// Logic
		Reset_Working();
		// Neuron.LC_Analysis(this);
		Potential_Weight += Weight * CH.LC_Weight;
		Potential_Charge += Charge * Weight * CH.LC_Weight;
		
		// Meta
		Reset_Working();
		// Neuron.MC_Analysis(this);
		Potential_Weight += Weight * CH.MC_Weight;
		Potential_Charge += Charge * Weight * CH.MC_Weight;
		
		// Channel feeds
		Reset_Working();
		// Neuron.CH_Analysis(this);
		Potential_Weight += Weight * CH.CH_Weight;
		Potential_Charge += Charge * Weight * CH.CH_Weight;
	}
	
	void Reset_Working() {
		Charge = 0.0;
		Weight = 0.0;
	}
}

//------------------------------------------------------------------------------------------
//
//	[END] Charge_Node Class
//
//==========================================================================================