//==========================================================================================
//
//	Charge Node
//
//	Overview: Record of a charge for a certain channel at a certain time.
//
//	Note: Weights behave like confidence ratings.
//		Between 0.00 (0%) and 1.00 (100%)
//
//		Created and accessed through neurons.
//
//==========================================================================================
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//==========================================================================================
//
//	[START] Includes, Packages, Headers
//
//------------------------------------------------------------------------------------------

// Package
package RASA;

//------------------------------------------------------------------------------------------
//
//	[END] Includes, Packages, Headers
//
//==========================================================================================
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//==========================================================================================
//
//	[START] Charge_Node Class
//
//------------------------------------------------------------------------------------------

public class Charge_Node {

	//=====================================================================
	//
	// 		CLASS FIELDS
	//
	//---------------------------------------------------------------------
	
	// Parent info
	public Time_Node TN;
	public Channel CH;
	public Neuron N;
	public Neural_Network NN;
	
	// Unordered lists
	public Charge_Node TN_Next;
	public Charge_Node TN_Prev;
	public Charge_Node CH_Next;
	public Charge_Node CH_Prev;
	
	// Ordered Lists
	public Charge_Node NN_Next;
	public Charge_Node NN_Prev;
	public Charge_Node N_Next;
	public Charge_Node N_Prev;
	
	// Attributes
	public double Stimulation;
	public double Current_Charge;
	public double Current_Weight;
	public double Potential_Sum;
	public double Potential_Weight;
	public double Highest_Claim;
	public double Lowest_Claim;
	
	// For use in updates
	public double Charge;
	public double Weight;
	
	//=====================================================================
	//
	// 		CLASS METHODS
	//
	//---------------------------------------------------------------------
	
	// Constructor
	public Charge_Node(Time_Node tn, Channel ch, Neuron n, Neural_Network nn){
		TN = tn;
		CH = ch;
		N = n;
		NN = nn;
		
		// Unordered lists
		TN_Next = null;
		TN_Prev = null;
		CH_Next = null;
		CH_Prev = null;
		
		// Ordered lists
		NN_Next = null;
		NN_Prev = null;
		N_Next = null;
		N_Prev = null;
		
		Stimulation = 0.0;
		Current_Charge = 0.0;
		Current_Weight = 0.0;
		Potential_Sum = 0.0;
		Potential_Weight = 0.0;
		Highest_Claim = 0.0;
		Lowest_Claim = 0.0;
		
		Charge = 0.0;
		Weight = 0.0;
		
		Register();
	}

	// Info
	
	// Registers CN in neural network's queue
	public void Register() {
		if (NN.First_CN != this && NN_Prev == null) {
			NN.Register_CN(this);
		}
	}
	
	public int Time() {
		return TN.Actual_Time();
	}
	
	public int Actual_Time() {return TN.Actual_Time();}
	public int Relative_Time() {return TN.Relative_Time();}
	
	public double Update_Rating() {
		return Stimulation;
	}
	
	public double Active_Charge() {
		return Charge;
	}
	
	public double Active_Weight() {
		return Weight;
	}
	
	
	
	public void N_Sort() {
		// Original order: A B C D E
		
		Charge_Node A = null;
		Charge_Node B = N_Prev;
		Charge_Node C = this;
		Charge_Node D = N_Next;
		Charge_Node E = null;
		
		if (B != null) A = B.N_Prev;
		if (D != null) E = D.N_Next;
		
		// [I] Sort by Time node
		
		// (I.1) - - C - -
		if (B == null && D == null) {}
		
		// (I.2) * * C D * --> * * D C *
		else if ((D != null) && ((D.CH.ID < C.CH.ID) || (D.CH.ID == C.CH.ID && D.Time() < C.Time()))) {
			C.N_Next = E;
			if (E != null) E.N_Prev = C;
			C.N_Prev = D;
			D.N_Next = C;
			D.CH_Prev = B;
			if (B == null) C.N.First_CN = D;
			else B.N_Next = D;
			C.N_Sort();
		}
		
		// (I.3) * B C * * --> * C B * *
		else if ((B != null) && ((C.CH.ID < B.CH.ID) || (C.CH.ID == B.CH.ID && C.Time() < B.Time()))) {
			if (A == null) C.N.First_CN = C;
			else A.N_Next = C;
			B.N_Prev = C;
			B.CH_Next = D;
			C.N_Next = B;
			C.N_Prev = A;
			if (D != null) D.N_Prev = C;

			C.N_Sort();
		}
		
	}
	
	// Main method
	public void Update() {
		
		// Reset variables
		Potential_Sum = 0.0;
		Potential_Weight = 0.0;
		Highest_Claim = 0.0;
		Lowest_Claim = 0.0;
		Reset_Working();
		
		// Get claims
		N.Get_Claims(this);
		
		
		// Long Term
		Reset_Working();
		// Neuron.Analyze_LT(this);
		Potential_Weight += Weight * CH.LT_Weight;
		Potential_Sum += Charge * Weight * CH.LT_Weight;
		
		// Short Term
		Reset_Working();
		// Neuron.ST_Analysis(this);
		Potential_Weight += Weight * CH.ST_Weight;
		Potential_Sum += Charge * Weight * CH.ST_Weight;
		
		// Logic
		Reset_Working();
		// Neuron.LC_Analysis(this);
		Potential_Weight += Weight * CH.LC_Weight;
		Potential_Sum += Charge * Weight * CH.LC_Weight;
		
		// Meta
		Reset_Working();
		// Neuron.MC_Analysis(this);
		Potential_Weight += Weight * CH.MC_Weight;
		Potential_Sum += Charge * Weight * CH.MC_Weight;
		
		// Channel feeds
		Reset_Working();
		// Neuron.CH_Analysis(this);
		Potential_Weight += Weight * CH.CH_Weight;
		Potential_Sum += Charge * Weight * CH.CH_Weight;
		
		Current_Charge = Potential_Sum / Potential_Weight;
		Current_Weight = Potential_Weight;
		
		// Modify update ratings of connected neurons
		// Long Term & short term
		for (int LT = 0; LT < N.Out_Synapses.size(); LT++) {
			Synapse S = N.Out_Synapses.get(LT);
			double Claim = 0.0;
			// LT Claims
			Claim = S.LT_Strength * S.LT_Weight;
			Claim *= (S.To().Active_Charge(TN, CH) - (Active_Charge() * Active_Weight()));
			S.To().Get_CN(TN, CH).Stimulation += Claim;
			// ST Claims TODO


		}
		// Logic TODO
		// Meta TODO
		// Channel Feeds TODO
		
		// Reset Update Rating
		Stimulation = 0.0;
	}
	
	void Reset_Working() {
		Charge = 0.0;
		Weight = 0.0;
	}
	
	
	//==========================================
	// Reports
	//------------------------------------------
	
	public void Print_Report(String Tags) {
		Print_Header();
		System.out.print(" " + (Current_Charge * 100.0) + "% (" + Current_Weight + ")");
		
		if (Tags.contains("DEBUG") && !Tags.contains("HIDE_CN")) {

			Print_Header();
			System.out.print(" N_Next: ");
			if (N_Next == null) System.out.print(" ---");
			else N_Next.Print_Header();
			Print_Header();
			System.out.print(" N_Prev: ");
			if (N_Prev == null) System.out.print(" ---");
			else N_Prev.Print_Header();
		}
		
	}

	public void Print_Header() {
		N.Print_Header();
		CH.Print_Label();
		TN.Print_Label();
	}
	
	public void Print_Header(int Depth) {
		if (Depth > 1) N.Print_Header(Depth-1);
		CH.Print_Label();
		TN.Print_Label();
	}
	
	
}

//------------------------------------------------------------------------------------------
//
//	[END] Charge_Node Class
//
//==========================================================================================